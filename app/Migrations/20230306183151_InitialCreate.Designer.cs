// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using app.Data;

#nullable disable

namespace app.Migrations
{
    [DbContext(typeof(EmployeesContext))]
    [Migration("20230306183151_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "8d52c894-cec6-4833-8145-0c801aad56ff",
                            Name = "Administrativo",
                            NormalizedName = "ADMINISTRATIVO"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "cfcde936-2619-4185-aa06-449d76f0ebbf",
                            Name = "Financeiro",
                            NormalizedName = "FINANCEIRO"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "0379e905-ef81-45a2-8ae5-272adb2b1536",
                            Name = "Recursos Humanos",
                            NormalizedName = "RECURSOS HUMANOS"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "42dc39b3-43f4-4216-ab90-8e6be56daadd",
                            Name = "Operacional",
                            NormalizedName = "OPERACIONAL"
                        },
                        new
                        {
                            Id = "5",
                            ConcurrencyStamp = "789bdd4c-8562-42c2-ab53-6a97779a0b95",
                            Name = "Comercial",
                            NormalizedName = "COMERCIAL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f8ee969-51e1-48da-b7bb-4890c0c461bb",
                            Email = "monteirolevi@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MONTEIROLEVI@ADMIN.COM",
                            NormalizedUserName = "MONTEIROLEVI@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPxtMnG1uQxNHqbrCb3nHOwCMS+D5hy8hGVYddoY2DJZMnCN/oeYQssijuCZr7O/LA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "monteirolevi@admin.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7037b39-3b59-4bbb-a80c-889b144373aa",
                            Email = "emillyraquel@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMELLYRAQUEL@ADMIN.COM",
                            NormalizedUserName = "EMELLYRAQUEL@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENjvoKRgcS77g0oInrLRjfjKSN+pM91rZL1AmEiZCqIikC7r+Me1QHs08B/QYLVohQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "emillyraquel@admin.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "752b9146-2ce7-4cc9-8c75-bffb18fc66d3",
                            Email = "marcelasonia@finan.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARCELASONIA@FINAN.COM",
                            NormalizedUserName = "MARCELASONIA@FINAN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDoTah6j8CX2ePgCEK17U3msQDgnJFBnoYkgzRENIntTmic97cJKediNNaY38fp3Ag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "marcelasonia@finan.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bffcdc8-703b-4846-91ce-401b236da9be",
                            Email = "renanluiz@rh.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RENANLUIZ@RH.COM",
                            NormalizedUserName = "RENANLUIZ@RH.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP6xkJw+vwM7JdUogDBCUsiKsX3b1JKhet5OSKN2QcH0I2jcATztoUlbGKR+vTKqZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "renanluiz@rh.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2a05f15-449a-4ed3-8a17-a6f22a4efc1b",
                            Email = "biancalara@opera.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BIANCALARA@OPERA.COM",
                            NormalizedUserName = "BIANCALARA@OPERA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEo5Zh3wrk54RjNEjUIea+xAHpCtMc+4PTU0QZwpo3TLO72Aip+uUB0zOYApkUsPlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "biancalara@opera.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87311d15-7752-4500-89df-928d0438bee4",
                            Email = "cauecarlos@opera.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CAUECARLOS@OPERA.COM",
                            NormalizedUserName = "CAUECARLOS@OPERA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAkKZYw3+O3BbGNxx598gauBSME4EIFuTg970PdBpiJ79XHFYwX9mCKlowiJepQLlA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "cauecarlos@opera.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3582ed15-b3fe-4516-8999-60ccc9eab190",
                            Email = "cauematheus@opera.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CAUEMATHEUS@OPERA.COM",
                            NormalizedUserName = "CAUEMATHEUS@OPERA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENBhZCU3lOu3pyy9i2wWjqh6C6gYUgWccKwSNmuvgM2yx8gXNY/QwMzW0RhaKBFLGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "cauematheus@opera.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad4cf650-487b-4f7c-b36e-ce612cc98b5d",
                            Email = "luiselias@comercial.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LUISELIAS@COMERCIAL.COM",
                            NormalizedUserName = "LUISELIAS@COMERCIAL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH3aZnRVJ0e51EQIhVauMUU7Yg+N7qhUv2iPEZ7kv2p5s1FMFUiyf/UotJJaZL4Viw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "luiselias@comercial.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "794e9281-2f2e-49d8-81b1-aba0050a30e9",
                            Email = "barroseliane@comercial.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BARROSELIANE@COMERCIAL.COM",
                            NormalizedUserName = "BARROSELIANE@COMERCIAL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHxA9tZf0PqInzF4ZYv8LQpgSvAwTt/cQrxVk1r4hm02bSbvFnzXNcS5lfOjJSQd4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "barroseliane@comercial.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "40e2accb-cf22-4c1d-a24a-d4332f6efb17",
                            Email = "araujojose@comercial.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ARAUJOJOSE@COMERCIAL.COM",
                            NormalizedUserName = "ARAUJOJOSE@COMERCIAL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELIYWuwbAXuP5eLR//f7bJ4qUXagaJoodgo+tmqT8/PjJ2iwANEhgSEpqEll6wbkWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "araujojose@comercial.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -730306230,
                            ClaimType = "Administrativo",
                            ClaimValue = "Create,Read,Update,Delete",
                            UserId = "1"
                        },
                        new
                        {
                            Id = -20566640,
                            ClaimType = "Administrativo",
                            ClaimValue = "Create,Read,Update,Delete",
                            UserId = "2"
                        },
                        new
                        {
                            Id = 63421998,
                            ClaimType = "Financeiro",
                            ClaimValue = "Read",
                            UserId = "3"
                        },
                        new
                        {
                            Id = -156103649,
                            ClaimType = "Recursos Humanos",
                            ClaimValue = "Create,Read,Update,Delete",
                            UserId = "4"
                        },
                        new
                        {
                            Id = 150220408,
                            ClaimType = "Operacional",
                            ClaimValue = "Read",
                            UserId = "5"
                        },
                        new
                        {
                            Id = 979608038,
                            ClaimType = "Operacional",
                            ClaimValue = "Read",
                            UserId = "6"
                        },
                        new
                        {
                            Id = -2047716072,
                            ClaimType = "Operacional",
                            ClaimValue = "Read",
                            UserId = "7"
                        },
                        new
                        {
                            Id = -1203762942,
                            ClaimType = "Comercial",
                            ClaimValue = "Read",
                            UserId = "8"
                        },
                        new
                        {
                            Id = -2010320002,
                            ClaimType = "Comercial",
                            ClaimValue = "Read",
                            UserId = "9"
                        },
                        new
                        {
                            Id = 317725475,
                            ClaimType = "Comercial",
                            ClaimValue = "Read",
                            UserId = "10"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "8",
                            RoleId = "5"
                        },
                        new
                        {
                            UserId = "9",
                            RoleId = "5"
                        },
                        new
                        {
                            UserId = "10",
                            RoleId = "5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("app.Models.EmployeesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("role");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("sector");

                    b.HasKey("Id");

                    b.ToTable("tb_employess", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Levi Mário Levi Monteiro",
                            Role = "CEO",
                            Sector = "Administrativo"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Raquel Andreia Emilly Fogaça",
                            Role = "CTO",
                            Sector = "Administrativo"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sônia Carolina Marcela da Silva",
                            Role = "Contabilidade",
                            Sector = "Financeiro"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Luiz Hugo Renan Dias",
                            Role = "Gestor de pessoas",
                            Sector = "Recursos Humanos"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Antônia Bianca Lara Almeida",
                            Role = "DevOps",
                            Sector = "Operacional"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Hugo Cauê Carlos Eduardo Martins",
                            Role = "Dev FrontEnd",
                            Sector = "Operacional"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Cauê Matheus Nicolas Santos",
                            Role = "Dev BacktEnd",
                            Sector = "Operacional"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Elias Luís Moreira",
                            Role = "PO",
                            Sector = "Comercial"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Eliane Melissa Barros",
                            Role = "Marketing",
                            Sector = "Comercial"
                        },
                        new
                        {
                            Id = 10,
                            Name = "José Hugo Araújo",
                            Role = "Atendimento",
                            Sector = "Comercial"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
